<?php
class Accounts {
	public $db;
	public $tprefix;
	public function __construct() {
		$this->db = new DDB();
		$this->tprefix = TPREFIX;
	}
	public function SessionLive() {
		if(isset($_SESSION['user']['id'])) {
			return true;
		}
		else {
			return false;
		}
	}
	public function UserDetails($arg1, $arg2) {
		//arg1 = User ID
		//arg2 = Detail
		switch($arg2) {
			case "username":
			return self::Username($arg1);
			break;
			case "gravatar":
			return self::Gravatar($arg1);
			break;
		}
	}
	public function Username($arg1) {
		$query = <<<SQL
		SELECT uname
		FROM {$this->tprefix}accounts
		WHERE id = :arg1
SQL;
		$resource = $this->db->db->prepare( $query );
			$resource->execute( array (
			":arg1"	=> $arg1,
			));
			$result = $resource->fetch(PDO::FETCH_ASSOC);
			return ucfirst($result['uname']);
	}
	public function Gravatar($arg) {
		$query = <<<SQL
		SELECT email
		FROM {$this->tprefix}accounts
		WHERE id = :arg1
SQL;
		$resource = $this->db->db->prepare( $query );
			$resource->execute( array (
			":arg1"	=> $arg,
			));
			$result = $resource->fetch(PDO::FETCH_ASSOC);
			$default = "//gravatar.com/avatar";
			$email = $result['email'];
			$size = 80;
			$grav_url = "http://www.gravatar.com/avatar/" . md5( strtolower( trim( $email ) ) ) . "?d=" . urlencode( $default ) . "&s=" . $size;
			return "<img src='".$grav_url."' alt=''>";
	}
	public function Login($arg1, $arg2) {
		$query = <<<SQL
		SELECT id
		FROM {$this->tprefix}accounts
		WHERE password = :pass
SQL;
		$resource = $this->db->db->prepare( $query );
			$resource->execute( array (
			":pass"	=> sha1(strtoupper($arg1.':'.$arg2)),
			));
		if($resource->rowCount() == 0 ) {
			echo "WrongLogon";
		}
		else {
			$result = $resource->fetch(PDO::FETCH_ASSOC);
			echo $result['id'];
			self::SetSession($result['id']);
		}
	}
	public function SetSession($arg) {
		session_start();
		$_SESSION['user']['id'] = $arg;
	}
	public function Register($arg,$arg2,$arg3) {
		print_r($_POST);
		self::CheckEmail($arg,$arg2,$arg3);
	}
	public function CheckEmail($arg,$arg2,$arg3) {
		$query = <<<SQL
		SELECT email
		FROM {$this->tprefix}accounts
		WHERE email = :arg3
SQL;
		$resource = $this->db->db->prepare( $query );
			$resource->execute( array (
			":arg3"	=> $arg3,));
		if($resource->rowCount() == 0 ) {
			self::CheckUsername($arg,$arg2,$arg3);
		}
		else {
			echo "Email Already In Use";
		}
	}
	public function CheckUsername($arg,$arg2,$arg3) {
		$query = <<<SQL
		SELECT uname
		FROM {$this->tprefix}accounts
		WHERE uname = :arg
SQL;
		$resource = $this->db->db->prepare( $query );
		$resource->execute( array (
		":arg"	=> $arg,
		));
		if($resource->rowCount() == 0 ) {
			self::RegisterUser($arg,$arg2,$arg3);
		}
		else {
			echo "Username In Use";
		}
	}
	public function RegisterUser($arg,$arg2,$arg3) {
		$query = <<<SQL
		INSERT INTO {$this->tprefix}accounts(uname,password,email) 
		VALUES(:arg,:arghash,:arg3)
SQL;
		$resource = $this->db->db->prepare( $query );
		$resource->execute( array (
		":arg"	=> $arg,
		":arghash"	=> sha1(strtoupper($arg.':'.$arg2)),
		":arg3"	=> $arg3,
		));
		
	}
	/*For Use As FTP Plugin Later On.
	public function CreateUserFolder($arg,$arg2,$arg3) {
		if(file_exists(ROOT_PATH.'/accounts/'.$arg)) {
			echo "User Exists";

		}
		else {
		mkdir(ROOT_PATH.'/accounts/'.$arg, 0777, true);
		self::CreateFTPAccount($arg,$arg2,$arg3);
		}
	}
	public function CreateFTPAccount($arg,$arg2,$arg3) {
		try {
		$query = <<<SQL
		INSERT INTO {$this->tprefix}ftpuser(userid,passwd,homedir)
		VALUES(:userid,:passwd,:homedir)
SQL;
		$resource = $this->db->db->prepare( $query );
		$resource->execute( array (
		":userid"	=> $arg,
		":passwd"	=> crypt($arg2, "salt"),
		":homedir"	=> "/var/www/html/accounts/".$arg,
		));
		echo "Inserted";
		}
		catch(Exception $e) {
			echo $e->getMessage();
		}
		
	}
	*/
	//API Details

	public function APIReturnMembers() {
		require_once(dirname(__file__).'/apikey.class');
		CheckAPIKey();
		$query = <<<SQL
		SELECT uname
		FROM {$this->tprefix}accounts
SQL;
		//$encode = array();

		$resource = $this->db->db->prepare( $query );
		$resource->execute();
		foreach($resource as $row) {
		$encode[] = $row['uname'];
		}
		echo json_encode($encode);  
} 
}